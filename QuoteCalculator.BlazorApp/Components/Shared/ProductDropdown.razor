@using QuoteCalculator.Domain.Models
@using QuoteCalculator.Domain.Models.ViewModels

@inject HttpClient _httpClient

<MudStack Row="true">
    <MudSelect Label="Select a product" T="ProductModel" @bind-Value="model.Product">
        @foreach (var product in productList ?? new List<ProductModel>())
        {
            <MudSelectItem T="ProductModel" Value="@product">@product.Title</MudSelectItem>
        }
    </MudSelect>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
</MudStack>

@* <MudButton OnClick="LoadProductListItems" Variant="Variant.Filled">Load Items</MudButton> *@
@* <MudButton OnClick="async () => await LoadProductListItems()" Variant="Variant.Filled">Load Items</MudButton> *@

@* <p>Selected: @model.Product.Id</p> *@

@code {
    [Parameter]
    public QuotationViewModel model { get; set; } = new();

    private bool isLoading;
    private List<ProductModel>? productList = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProductListItems();
    }

    private async Task LoadProductListItems()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // productList = await _httpClient.GetFromJsonAsync<List<ProductModel>>("https://localhost:7238/api/Product/GetProductList");
            productList = await _httpClient.GetFromJsonAsync<List<ProductModel>>("api/Product/GetProductList");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching productList: {ex.Message}");
        }
        finally
        {
            if (!productList.Any()) // Mock Product list for research and scientific purposes.
            {
                productList = await _httpClient.GetFromJsonAsync<List<ProductModel>>("api/Product/GetMockProductList");
            }

            isLoading = false;
            StateHasChanged();
        }
    }
}
