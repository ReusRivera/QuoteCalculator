@using QuoteCalculator.Domain.Models

@inject HttpClient _httpClient

<MudStack Row="true">
    <MudSelect Label="Select a product" T="ProductModel" @bind-Value="selectedProduct">
        @foreach (var product in productList ?? new List<ProductModel>())
        {
            <MudSelectItem T="ProductModel" Value="@product">@product.Title</MudSelectItem>
        }
    </MudSelect>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
</MudStack>

@* <MudButton OnClick="LoadProductListItems" Variant="Variant.Filled">Load Items</MudButton> *@
@* <MudButton OnClick="async () => await LoadProductListItems()" Variant="Variant.Filled">Load Items</MudButton> *@

@* <p>Selected: @selectedProduct.Id</p> *@
@* <p>Selected: @selectedProduct.Title</p> *@

@code {
    private List<ProductModel>? productList = new();
    private ProductModel? selectedProduct;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductListItems();
    }

    private async Task LoadProductListItems()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // productList = await _httpClient.GetFromJsonAsync<List<ProductModel>>("https://localhost:7238/api/Product/GetProductList");
            productList = await _httpClient.GetFromJsonAsync<List<ProductModel>>("api/Product/GetProductList");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching productList: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
