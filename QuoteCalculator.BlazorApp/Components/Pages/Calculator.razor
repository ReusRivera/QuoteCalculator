@using QuoteCalculator.Domain.Models.ViewModels

@page "/calculator"

@inject HttpClient _httpClient
@inject NavigationManager _navigation

<PageTitle>Quote Calculator</PageTitle>

<div class="container">
    <div class="d-flex justify-content-center">
        <h3 class="text-center text-secondary">Quote Calculator</h3>
    </div>

    <EditForm FormName="Form_CalculateQuotation" Model="@model" OnValidSubmit="Submit_CalculateQuotation">
        <DataAnnotationsValidator />
        <div class="container">
            <div class="d-flex flex-column align-items-center gap-4 mb-5">
                <CalculatorProductDropdown model="model" />
            </div>

            <div class="d-flex flex-column align-items-center gap-4 mb-5">
                <MudSlider T="decimal" Size="Size.Large" @bind-Value="@model.AmountRequired" Min="100" Max="1000" ValueLabel="true" ValueLabelFormat="₱ 0.00">How much do you need?</MudSlider>
                <MudSlider Size="Size.Large" @bind-Value="@model.Term" Min="1" Max="60" ValueLabel="true">Term</MudSlider>
            </div>

            <div class="d-flex justify-content-center mb-5">
                <CalculatorBorrowerDetails model="model" />
            </div>

            <div class="d-flex justify-content-center">
                <div class="d-flex flex-column align-items-center gap-3">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large">Calculate Quote</MudButton>
                    <p class="text-muted small">This quote does not affect your credit score.</p>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private bool isSuccess = false;

    QuotationViewModel model = new QuotationViewModel();

    protected override async Task OnInitializedAsync()
    {
        await LoadCalculatorDetails();
    }

    private async Task LoadCalculatorDetails()
    {
        // isLoading = true;
        // StateHasChanged();

        // try
        // {
        //     model = await _httpClient.GetFromJsonAsync<FinanceViewModel>("api/Quotation/GetMockQuote");
        // }
        // catch (Exception ex)
        // {
        //     Console.WriteLine($"Error fetching quotation: {ex.Message}");
        // }
        // finally
        // {
        //     isLoading = false;
        //     StateHasChanged();
        // }
    }

    private async Task Submit_CalculateQuotation(EditContext context)
    {
        // if (!isSuccess)
        // {
        //     // NavigateToQuotationComponent("quotation");
        // }

        // StateHasChanged();

        var response = await _httpClient.PostAsJsonAsync("api/Quotation/CalculateQuote", model);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<FinanceViewModel>();

            if (result != null)
            {
                var financeId = result.Id.ToString();

                NavigateToQuotationComponent(financeId);
            }
        }
    }

    private void NavigateToQuotationComponent(string redirectUrl)
    {
        _navigation.NavigateTo($"quotation/{redirectUrl}");
    }
}
